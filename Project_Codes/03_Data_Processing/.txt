#Import KPSS and ADF
from statsmodels.tsa.stattools import adfuller, kpss

#Function runs ADF and KPSS test on series, prints results
def ADF_KPSS_test(series, periods):
    """
    Series: Time series data you would like to test for stationrity
    Periods: Seasonal period
    """
    #Convert series to values and subset to remove NA values
    X = series.values[periods:]
    
    #Implement ADF and KPSS
    adf_results = adfuller(X)
    kpss_results = kpss(X)
    
    #Print results
    print('ADF Statistic: {}'.format(adf_results[0]))
    print('P-Value: {}'.format(adf_results[1]))
    for k,v in adf_results[4].items():
        print('Critical Values {} : {}'.format(k,round(v,4)))
    print('===============================================')
    print('KPSS Statistic: {}'.format(kpss_results[0]))
    print('P-Value: {}'.format(kpss_results[1]))
    for k,v in kpss_results[3].items():
        print('Critical Values {} : {}'.format(k,round(v,4)))
    
#Function calculates and prints mean and variance metrics of first and second half of time series
def mean_var_test(series, periods):
    """
    Series: Time series data you would like to test for stationrity
    Periods: Seasonal period
    """
    #Convert series to values and subset to remove NA values
    X = series.values[periods:]
    
    #Set split to be midpoint of time series
    split = round(len(X)/2)
    #Split time series
    X1,X2 = X[:split], X[split:]
    #calculate and print mean and var of 2 halves of time series 
    mean1, mean2 = np.mean(X1), np.mean(X2)
    var1, var2 = np.var(X1), np.var(X2)
    return print('Mean1: {}\nMean2: {}\nVar1: {}\nVar2: {}'.format(mean1, mean2, var1, var2))
    
def timeseries_plot(series, figsize = None , title = None, xlabel = None, ylabel = None,legend = False,label = None,
                    title_dict = None, label_dict = None,color = None,ax=None, alpha = None):
    """
    Plot Time Series Data
    """
    plot = series.plot(color = color,label = label,alpha=alpha, ax=ax)
    plot.set_title(title, fontdict=title_dict)
    plot.set_ylabel(ylabel,fontdict=label_dict)
    plot.set_xlabel(xlabel,fontdict=label_dict)
    if legend == True:
        plot.legend(fancybox = True, shadow = True, frameon = True)
    return plot